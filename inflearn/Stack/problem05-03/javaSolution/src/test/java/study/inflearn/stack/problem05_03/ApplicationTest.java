package study.inflearn.stack.problem05_03;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.params.provider.Arguments.of;

import java.util.Arrays;
import java.util.stream.Stream;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

class ApplicationTest {

	@ParameterizedTest
	@MethodSource("problem05_03_params")
	void solutionTest(String inputStr, int expect) {
		Application app = new Application();

		String[] splitInputs = inputStr.split("\n");
		int n = Integer.parseInt(splitInputs[0].trim());
		int inputLineCnt = 1;
		int[][] map = new int[n][n];
		for (int i = 0; i < n; i++) {
			map[i] = Arrays.stream(splitInputs[inputLineCnt++].trim().split(" "))
				.mapToInt(Integer::parseInt)
				.toArray();
		}
		int[] moves = Arrays.stream(splitInputs[inputLineCnt + 1].trim().split(" "))
			.mapToInt(Integer::parseInt)
			.toArray();
		int answer = app.solution(map, moves);

		assertEquals(expect, answer);
	}

	private static Stream<Arguments> problem05_03_params() {
		return Stream.of(
			of("5\n"
				+ "0 0 0 0 0\n"
				+ "0 0 1 0 3\n"
				+ "0 2 5 0 1\n"
				+ "4 2 4 4 2\n"
				+ "3 5 1 3 1\n"
				+ "8\n"
				+ "1 5 3 5 1 2 1 4", 4),
			of("6\n"
				+ "0 0 0 0 0 0\n"
				+ "0 0 1 0 3 1\n"
				+ "0 2 5 0 1 1\n"
				+ "4 2 4 4 2 3\n"
				+ "3 5 1 3 1 3\n"
				+ "4 2 4 4 2 3\n"
				+ "10\n"
				+ "1 5 3 5 1 2 1 4 3 4", 6),
			of("10\n"
				+ "0 0 0 0 0 0 0 0 0 0\n"
				+ "0 0 1 0 3 1 0 0 1 2\n"
				+ "0 2 5 0 1 1 7 7 0 5\n"
				+ "4 2 4 4 2 3 6 7 4 7\n"
				+ "3 5 1 3 1 3 5 7 3 5\n"
				+ "4 2 4 4 2 3 3 2 1 5 \n"
				+ "4 2 4 4 2 3 6 7 4 7\n"
				+ "3 5 1 3 1 3 5 7 3 5\n"
				+ "4 2 4 4 2 3 3 2 1 5 \n"
				+ "3 5 1 3 1 3 5 7 3 5\n"
				+ "15\n"
				+ "1 5 3 5 1 2 1 4 3 4 7 8 9 7 8", 8),
			of("20\n"
				+ "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"
				+ "0 0 1 0 3 1 0 0 1 2 0 0 1 0 3 1 0 0 1 2\n"
				+ "0 2 5 0 1 1 7 7 0 5 0 2 5 0 1 1 7 7 0 5\n"
				+ "4 2 4 4 2 3 6 7 4 7 4 2 4 4 2 3 6 7 4 7\n"
				+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
				+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5\n"
				+ "4 2 4 4 2 3 6 7 4 7 4 2 4 4 2 3 6 7 4 7\n"
				+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
				+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5\n"
				+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
				+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5\n"
				+ "4 2 4 4 2 3 6 7 4 7 4 2 4 4 2 3 6 7 4 7\n"
				+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
				+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5\n"
				+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
				+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5\n"
				+ "4 2 4 4 2 3 6 7 4 7 4 2 4 4 2 3 6 7 4 7\n"
				+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
				+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5\n"
				+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
				+ "30\n"
				+ "1 5 3 5 1 2 1 4 3 4 7 8 9 7 8 1 15 13 5 1 12 11 14 13 14 17 18 19 17 18", 12),
			of("30\n"
					+ "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"
					+ "0 0 1 0 3 1 0 0 1 2 0 0 1 0 3 1 0 0 1 2 0 0 1 0 3 1 0 0 1 2\n"
					+ "0 2 5 0 1 1 7 7 0 5 0 2 5 0 1 1 7 7 0 5 0 2 5 0 1 1 7 7 0 5\n"
					+ "4 2 4 4 2 3 6 7 4 7 4 2 4 4 2 3 6 7 4 7 4 2 4 4 2 3 6 7 4 7\n"
					+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5\n"
					+ "4 2 4 4 2 3 6 7 4 7 4 2 4 4 2 3 6 7 4 7 4 2 4 4 2 3 6 7 4 7\n"
					+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 6 7 4 7 4 2 4 4 2 3 6 7 4 7 3 5 1 3 1 3 5 7 3 5\n"
					+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 6 7 4 7 4 2 4 4 2 3 6 7 4 7 3 5 1 3 1 3 5 7 3 5\n"
					+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 6 7 4 7 4 2 4 4 2 3 6 7 4 7 3 5 1 3 1 3 5 7 3 5\n"
					+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 6 7 4 7 4 2 4 4 2 3 6 7 4 7 3 5 1 3 1 3 5 7 3 5\n"
					+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "4 2 4 4 2 3 3 2 1 5 4 2 4 4 2 3 3 2 1 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5 3 5 1 3 1 3 5 7 3 5\n"
					+ "70\n"
					+ "1 5 3 5 1 2 1 4 3 4 7 8 9 7 8 1 15 13 5 1 12 11 14 13 14 17 18 19 17 18 25 26 27 30 29 1 5 3 5 1 2 1 4 3 4 7 8 9 7 8 1 15 13 5 1 12 11 14 13 14 17 18 19 17 18 25 26 27 30 29",
				16)
		);
	}
}