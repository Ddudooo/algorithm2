package study.inflearn.array.problem02_11;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.params.provider.Arguments.of;

import java.util.Arrays;
import java.util.stream.Stream;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

class ApplicationTest {

	@ParameterizedTest
	@MethodSource("problem02_11_params")
	void solutionTest(String input, int expect) {
		Application app = new Application();
		String[] inputSplit = input.split("\n");
		int n = Integer.parseInt(inputSplit[0]);
		int[][] history = new int[n][5];
		for (int i = 0; i < n; i++) {
			history[i] = Arrays.stream(inputSplit[i + 1].trim().split(" "))
				.mapToInt(Integer::parseInt)
				.toArray();
		}

		int answer = app.solution(history, n);

		assertEquals(expect, answer);
	}

	private static Stream<Arguments> problem02_11_params() {
		return Stream.of(
			of("5\n"
				+ "2 3 1 7 3\n"
				+ "4 1 9 6 8\n"
				+ "5 5 2 4 4\n"
				+ "6 5 2 6 7\n"
				+ "8 4 2 2 2\n", 4),
			of("5\n"
				+ "9 8 7 6 5\n"
				+ "5 6 7 8 9\n"
				+ "1 2 3 7 8\n"
				+ "4 5 3 4 2\n"
				+ "6 2 8 4 2", 3),
			of("3\n"
				+ "5 4 4 2 1\n"
				+ "1 2 3 4 5\n"
				+ "1 2 3 7 8", 2),
			of("9\n"
				+ "1 2 3 4 5\n"
				+ "2 3 4 5 6\n"
				+ "3 4 5 6 7\n"
				+ "4 5 6 7 8\n"
				+ "5 6 7 8 9\n"
				+ "6 7 8 9 1\n"
				+ "7 8 9 1 2\n"
				+ "8 9 1 2 3\n"
				+ "9 1 2 3 4", 1),
			of("100\n"
				+ "1 1 1 1 1 \n"
				+ "1 1 1 1 1 \n"
				+ "1 1 1 1 1 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n"
				+ "8 9 5 6 7 \n"
				+ "9 5 6 7 8 \n"
				+ "5 6 7 8 9 \n"
				+ "6 7 8 9 5 \n"
				+ "7 8 9 5 6 \n", 4),
			of("200\n"
				+ "6 7 8 4 9 \n"
				+ "7 2 8 4 5 \n"
				+ "7 6 2 1 8 \n"
				+ "6 9 8 2 6 \n"
				+ "3 1 3 7 2 \n"
				+ "3 2 6 7 1 \n"
				+ "9 2 5 5 2 \n"
				+ "2 3 9 7 5 \n"
				+ "7 5 2 2 1 \n"
				+ "3 9 4 8 7 \n"
				+ "7 9 9 3 7 \n"
				+ "4 7 5 4 5 \n"
				+ "1 3 9 7 7 \n"
				+ "7 5 6 3 1 \n"
				+ "5 5 3 6 3 \n"
				+ "2 1 1 2 7 \n"
				+ "5 8 5 8 3 \n"
				+ "4 7 9 5 1 \n"
				+ "7 3 3 1 1 \n"
				+ "8 1 7 4 9 \n"
				+ "8 6 3 6 1 \n"
				+ "3 8 5 7 5 \n"
				+ "3 3 9 8 1 \n"
				+ "9 8 6 8 2 \n"
				+ "3 7 6 9 3 \n"
				+ "3 6 5 5 2 \n"
				+ "1 6 1 2 8 \n"
				+ "7 7 7 9 1 \n"
				+ "5 3 2 7 8 \n"
				+ "1 1 4 3 1 \n"
				+ "7 8 7 6 6 \n"
				+ "7 5 4 1 5 \n"
				+ "7 4 7 9 6 \n"
				+ "9 4 9 2 6 \n"
				+ "2 1 9 6 2 \n"
				+ "9 5 1 8 9 \n"
				+ "5 8 7 7 1 \n"
				+ "2 9 6 3 2 \n"
				+ "8 3 1 9 5 \n"
				+ "7 8 3 8 4 \n"
				+ "1 7 8 1 4 \n"
				+ "8 1 7 7 8 \n"
				+ "5 2 9 7 9 \n"
				+ "8 7 3 7 2 \n"
				+ "4 6 1 9 4 \n"
				+ "9 8 6 5 1 \n"
				+ "3 7 6 4 9 \n"
				+ "3 4 7 4 7 \n"
				+ "6 9 7 3 9 \n"
				+ "9 5 5 9 5 \n"
				+ "5 1 7 6 1 \n"
				+ "3 6 6 5 7 \n"
				+ "7 6 6 9 3 \n"
				+ "6 8 4 7 7 \n"
				+ "6 6 8 3 3 \n"
				+ "8 8 8 8 8 \n"
				+ "4 3 2 9 3 \n"
				+ "9 2 6 9 9 \n"
				+ "5 3 7 7 5 \n"
				+ "4 4 3 8 3 \n"
				+ "8 6 8 5 1 \n"
				+ "1 5 7 8 4 \n"
				+ "7 7 2 7 9 \n"
				+ "5 5 9 4 9 \n"
				+ "3 9 3 4 5 \n"
				+ "6 9 4 7 3 \n"
				+ "8 8 3 4 9 \n"
				+ "4 9 2 8 7 \n"
				+ "5 1 2 6 3 \n"
				+ "5 2 1 8 6 \n"
				+ "8 1 9 5 4 \n"
				+ "6 3 6 7 2 \n"
				+ "5 3 8 3 9 \n"
				+ "4 1 7 8 2 \n"
				+ "9 8 9 3 5 \n"
				+ "4 6 6 5 5 \n"
				+ "7 1 7 4 2 \n"
				+ "5 5 5 2 7 \n"
				+ "2 7 4 9 2 \n"
				+ "6 3 7 2 9 \n"
				+ "8 1 1 2 1 \n"
				+ "5 3 8 3 2 \n"
				+ "9 4 5 8 6 \n"
				+ "7 8 6 1 7 \n"
				+ "5 2 5 6 8 \n"
				+ "8 5 6 4 6 \n"
				+ "9 4 2 5 2 \n"
				+ "1 2 1 4 5 \n"
				+ "4 2 6 3 8 \n"
				+ "1 8 1 3 2 \n"
				+ "5 5 5 9 9 \n"
				+ "1 6 4 5 6 \n"
				+ "4 9 4 2 1 \n"
				+ "1 1 2 6 8 \n"
				+ "2 2 1 6 3 \n"
				+ "6 9 1 4 4 \n"
				+ "7 1 4 5 4 \n"
				+ "9 9 1 3 1 \n"
				+ "5 5 8 6 2 \n"
				+ "8 7 1 6 1 \n"
				+ "1 5 7 8 5 \n"
				+ "2 5 4 7 8 \n"
				+ "7 1 6 5 7 \n"
				+ "4 5 1 4 8 \n"
				+ "4 8 1 1 9 \n"
				+ "4 3 9 5 8 \n"
				+ "9 5 3 6 9 \n"
				+ "6 8 6 5 4 \n"
				+ "7 5 7 4 2 \n"
				+ "7 9 2 1 9 \n"
				+ "5 8 8 2 6 \n"
				+ "4 9 1 8 2 \n"
				+ "8 9 3 5 4 \n"
				+ "3 7 6 3 5 \n"
				+ "7 9 4 6 5 \n"
				+ "8 6 2 5 5 \n"
				+ "8 9 3 7 2 \n"
				+ "1 5 6 4 9 \n"
				+ "2 4 8 3 6 \n"
				+ "2 6 2 6 5 \n"
				+ "8 5 7 4 4 \n"
				+ "5 2 4 5 8 \n"
				+ "4 3 8 2 8 \n"
				+ "2 2 6 8 3 \n"
				+ "6 1 4 6 1 \n"
				+ "1 8 7 2 4 \n"
				+ "7 6 2 1 5 \n"
				+ "8 7 4 6 6 \n"
				+ "1 9 5 2 7 \n"
				+ "5 9 2 7 4 \n"
				+ "2 6 2 2 9 \n"
				+ "9 8 2 4 7 \n"
				+ "1 9 4 9 4 \n"
				+ "4 2 1 5 1 \n"
				+ "5 8 9 2 4 \n"
				+ "1 7 7 7 6 \n"
				+ "6 5 6 7 3 \n"
				+ "1 7 2 7 7 \n"
				+ "4 7 8 1 2 \n"
				+ "1 7 7 3 8 \n"
				+ "1 1 3 9 4 \n"
				+ "5 8 3 6 6 \n"
				+ "7 9 5 4 9 \n"
				+ "1 8 6 7 3 \n"
				+ "2 3 1 4 4 \n"
				+ "7 1 4 7 4 \n"
				+ "7 2 7 8 2 \n"
				+ "5 9 8 7 3 \n"
				+ "6 7 9 4 6 \n"
				+ "9 7 7 9 5 \n"
				+ "4 2 5 6 4 \n"
				+ "6 4 5 4 7 \n"
				+ "7 3 4 9 7 \n"
				+ "6 3 6 3 5 \n"
				+ "3 4 8 8 3 \n"
				+ "5 5 5 7 8 \n"
				+ "5 1 5 6 5 \n"
				+ "5 7 6 8 5 \n"
				+ "3 8 2 6 7 \n"
				+ "4 5 9 2 5 \n"
				+ "8 3 1 2 2 \n"
				+ "4 2 1 4 5 \n"
				+ "1 7 9 8 7 \n"
				+ "7 7 3 8 4 \n"
				+ "4 1 7 8 4 \n"
				+ "9 4 2 3 6 \n"
				+ "6 5 3 6 8 \n"
				+ "4 8 5 1 8 \n"
				+ "2 4 6 8 1 \n"
				+ "3 3 4 7 6 \n"
				+ "6 4 2 2 5 \n"
				+ "8 1 3 1 3 \n"
				+ "6 7 7 8 2 \n"
				+ "1 8 3 1 5 \n"
				+ "2 6 7 2 3 \n"
				+ "8 4 4 8 2 \n"
				+ "1 5 4 2 8 \n"
				+ "8 3 2 6 1 \n"
				+ "2 9 7 3 9 \n"
				+ "5 1 5 5 7 \n"
				+ "9 9 4 1 3 \n"
				+ "2 8 4 7 6 \n"
				+ "1 2 5 4 6 \n"
				+ "4 6 8 4 2 \n"
				+ "5 2 2 7 3 \n"
				+ "3 9 8 8 5 \n"
				+ "3 9 8 5 4 \n"
				+ "9 8 5 2 6 \n"
				+ "5 7 9 3 6 \n"
				+ "5 1 1 3 2 \n"
				+ "8 8 5 1 7 \n"
				+ "7 5 3 5 2 \n"
				+ "1 1 2 4 6 \n"
				+ "5 9 1 4 8 \n"
				+ "7 4 9 9 1 \n"
				+ "1 5 7 9 8 \n"
				+ "9 2 5 5 2 \n"
				+ "9 8 9 4 3 \n"
				+ "2 1 6 2 5 \n"
				+ "7 1 4 9 8\n", 158)
		);
	}
}