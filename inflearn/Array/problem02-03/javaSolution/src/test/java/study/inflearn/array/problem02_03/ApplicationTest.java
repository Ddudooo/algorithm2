package study.inflearn.array.problem02_03;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.params.provider.Arguments.of;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

class ApplicationTest {

	@ParameterizedTest
	@MethodSource("problem02_03_params")
	void solutionTest(String input, String expect) {
		Application app = new Application();
		String[] split = input.split("\n");
		int n = Integer.parseInt(split[0]);
		int[] A = Arrays.stream(split[1].trim().split(" ")).mapToInt(Integer::valueOf)
			.toArray();
		int[] B = Arrays.stream(split[2].trim().split(" ")).mapToInt(Integer::valueOf)
			.toArray();
		List<String> answer = app.solution(A, B, n);

		String actual = String.join("\n", answer);

		assertEquals(expect.trim(), actual);
	}

	private static Stream<Arguments> problem02_03_params() {
		return Stream.of(
			of("5\n"
				+ "2 3 3 1 3\n"
				+ "1 1 2 2 3\n", "A\n"
				+ "B\n"
				+ "A\n"
				+ "B\n"
				+ "D"),
			of("10\n"
				+ "1 2 1 2 1 3 3 2 3 1 \n"
				+ "3 3 3 2 3 3 2 3 2 3 ", "A\n"
				+ "B\n"
				+ "A\n"
				+ "D\n"
				+ "A\n"
				+ "D\n"
				+ "A\n"
				+ "B\n"
				+ "A\n"
				+ "A"),
			of("30\n"
				+ "1 1 3 1 3 3 3 2 2 2 3 3 1 1 1 3 1 2 1 2 3 1 2 1 1 1 3 2 1 1 \n"
				+ "2 2 2 2 3 1 2 2 2 3 1 1 3 3 3 1 1 2 3 2 2 3 2 2 2 1 1 1 2 3 ", "B\n"
				+ "B\n"
				+ "A\n"
				+ "B\n"
				+ "D\n"
				+ "B\n"
				+ "A\n"
				+ "D\n"
				+ "D\n"
				+ "B\n"
				+ "B\n"
				+ "B\n"
				+ "A\n"
				+ "A\n"
				+ "A\n"
				+ "B\n"
				+ "D\n"
				+ "D\n"
				+ "A\n"
				+ "D\n"
				+ "A\n"
				+ "A\n"
				+ "D\n"
				+ "B\n"
				+ "B\n"
				+ "D\n"
				+ "B\n"
				+ "A\n"
				+ "B\n"
				+ "A"),
			of("50\n"
					+ "1 3 1 1 3 3 3 3 3 1 2 2 1 3 1 3 1 3 2 2 3 1 3 3 3 2 3 3 3 2 1 3 2 1 1 1 1 2 1 2 3 1 3 3 2 3 3 3 3 2 \n"
					+ "3 3 1 3 2 3 1 1 2 2 1 3 2 3 1 2 2 3 3 3 1 1 3 2 1 1 2 1 2 1 1 3 3 3 1 3 1 3 3 1 3 1 3 3 2 1 3 1 2 1 ",
				"A\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "A\n"
					+ "D\n"
					+ "B\n"
					+ "B\n"
					+ "A\n"
					+ "B\n"
					+ "A\n"
					+ "B\n"
					+ "B\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "B\n"
					+ "D\n"
					+ "B\n"
					+ "B\n"
					+ "B\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "B\n"
					+ "A\n"
					+ "A\n"
					+ "B\n"
					+ "A\n"
					+ "A\n"
					+ "D\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "D\n"
					+ "A\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "A\n"
					+ "D\n"
					+ "D\n"
					+ "D\n"
					+ "D\n"
					+ "D\n"
					+ "B\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "A"),
			of("80\n"
					+ "1 2 1 2 3 3 3 1 3 2 3 2 1 1 3 3 3 2 2 3 1 1 3 3 1 3 1 2 1 2 1 3 1 3 3 1 2 2 2 2 2 3 2 2 2 1 3 1 2 3 1 1 3 2 2 2 3 1 1 3 2 3 1 1 1 1 2 2 2 1 1 1 1 1 2 3 3 1 2 1 \n"
					+ "2 1 1 1 2 1 1 1 1 2 2 2 1 3 2 1 3 2 1 3 1 1 1 2 3 1 3 2 2 1 3 2 2 3 3 2 1 2 3 1 1 1 2 2 1 2 3 1 2 3 1 3 2 2 2 1 1 3 2 3 2 3 3 1 2 1 3 2 2 3 1 1 3 1 2 1 1 2 2 2 ",
				"B\n"
					+ "A\n"
					+ "D\n"
					+ "A\n"
					+ "A\n"
					+ "B\n"
					+ "B\n"
					+ "D\n"
					+ "B\n"
					+ "D\n"
					+ "A\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "A\n"
					+ "B\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "D\n"
					+ "D\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "A\n"
					+ "B\n"
					+ "A\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "A\n"
					+ "A\n"
					+ "B\n"
					+ "D\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "A\n"
					+ "B\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "B\n"
					+ "D\n"
					+ "D\n"
					+ "D\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "A\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "B\n"
					+ "A\n"
					+ "B\n"
					+ "D\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "D\n"
					+ "B\n"
					+ "D\n"
					+ "B\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "D\n"
					+ "D\n"
					+ "B\n"
					+ "B\n"
					+ "B\n"
					+ "D\n"
					+ "B"),
			of("100\n"
					+ "3 3 1 1 3 1 3 1 3 3 1 2 3 1 3 3 2 2 2 3 2 2 3 3 3 2 1 2 1 2 3 2 1 2 2 1 1 1 2 1 3 3 3 2 1 2 1 2 3 1 3 2 1 2 2 2 3 2 1 2 1 1 3 2 1 3 3 2 1 3 1 2 1 3 3 2 3 2 2 1 1 1 1 2 3 2 2 3 2 2 1 2 3 2 1 3 3 3 3 1 \n"
					+ "1 3 2 1 3 3 3 2 3 1 1 1 3 1 2 2 3 1 2 3 3 1 3 1 2 1 3 2 2 1 1 2 1 1 2 3 3 2 3 1 3 3 1 1 1 1 2 2 3 3 1 1 3 2 1 3 3 1 3 1 1 2 2 2 3 1 1 3 2 1 2 1 1 1 2 1 1 2 1 3 3 2 1 2 3 3 2 1 3 2 2 1 3 1 2 3 2 1 2 3 ",
				"B\n"
					+ "D\n"
					+ "B\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "D\n"
					+ "B\n"
					+ "D\n"
					+ "B\n"
					+ "D\n"
					+ "A\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "A\n"
					+ "B\n"
					+ "A\n"
					+ "D\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "A\n"
					+ "A\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "B\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "D\n"
					+ "A\n"
					+ "A\n"
					+ "B\n"
					+ "B\n"
					+ "D\n"
					+ "D\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "D\n"
					+ "A\n"
					+ "B\n"
					+ "D\n"
					+ "D\n"
					+ "A\n"
					+ "B\n"
					+ "A\n"
					+ "A\n"
					+ "D\n"
					+ "A\n"
					+ "B\n"
					+ "D\n"
					+ "A\n"
					+ "A\n"
					+ "A\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "D\n"
					+ "A\n"
					+ "B\n"
					+ "B\n"
					+ "B\n"
					+ "B\n"
					+ "B\n"
					+ "B\n"
					+ "A\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "A\n"
					+ "B\n"
					+ "D\n"
					+ "A\n"
					+ "A\n"
					+ "A\n"
					+ "B\n"
					+ "D\n"
					+ "D\n"
					+ "D\n"
					+ "B\n"
					+ "D\n"
					+ "B\n"
					+ "B\n"
					+ "D\n"
					+ "B\n"
					+ "A\n"
					+ "D\n"
					+ "A\n"
					+ "B\n"
					+ "D\n"
					+ "A\n"
					+ "B\n"
					+ "A\n"
					+ "A")
		);
	}
}